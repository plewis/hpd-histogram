fan_etal_2011 = __FAN_ETAL_2011__
do_mcmc = FALSE
do_burnin = TRUE

seed(__RNSEED__)

####################
# Read in the data #
####################

data = readDiscreteCharacterData("../data/unpart.nex")

# get some useful information about the data
taxa = data.taxa()
num_taxa = data.ntaxa()
num_branches = 2 * num_taxa - 3

print("num_taxa     = " + num_taxa)
print("num_branches = " + num_branches)

# Create some vector for the moves and monitors of this analysis
moves    = VectorMoves()
monitors = VectorMonitors()

#########################################
# Define the prior on the tree topology #
#########################################

topology <- readBranchLengthTrees(file="../../__TREEFILE__")[1]

# not used because topology is fixed
#topology ~ dnUniformTopology(taxa)
#moves.append( mvNNI(topology, weight=10.0) )
#moves.append( mvSPR(topology, weight=10.0) )

##########################################
# Define the prior on the branch lengths #
##########################################

if (fan_etal_2011) {

    for(i in 1:num_branches){
        edgelens[i] ~ dnExponential(40.0)
        edgelens[i].setValue(0.01)
        moves.append( mvScale(edgelens[i], weight=1.0) )
    }
    tree_length := sum(edgelens)
    
} else {

    # Tree length parameter
    tree_length ~ dnGamma(shape=1, rate=0.1)
    moves.append( mvScale(tree_length) )

    # Edge length proportion parameters
    edge_length_proportions ~ dnDirichlet( rep(1.0,num_branches) )
    moves.append( mvBetaSimplex(edge_length_proportions, weight=num_branches) )
    moves.append( mvDirichletSimplex(edge_length_proportions, weight=num_branches/10.0) )

    # Define branch lengths deterministically from tree_length and edge_length_proportions
    edgelens := edge_length_proportions * tree_length
    
}

################################################
# Combine the tree topology and branch lengths #
################################################

phylogeny := treeAssembly(topology, edgelens)

############################################
# Define the substitution model parameters #
############################################

# GTR model

pi ~ dnDirichlet(v(1,1,1,1))
pi.setValue(v(0.25,0.25,0.25,0.25))
moves.append( mvBetaSimplex(pi, weight=1.0) )

er ~ dnDirichlet(v(1,1,1,1,1,1))
er.setValue(v(0.125, 0.250, 0.125, 0.125, 0.250, 0.125))
moves.append( mvBetaSimplex(er, weight=1.0) )

Qmatrix := fnGTR(er, pi)

#################################################
# Define the model of among-site rate variation #
#################################################

# Gamma rate heterogeneity

if (fan_etal_2011) {
    alpha ~ dnExponential(1.0)
    alpha.setValue(0.5)
    moves.append( mvScale(alpha, weight=1.0) )
    site_rates := fnDiscretizeGamma(alpha, alpha, 4)
} else {
    ratevar ~ dnExponential(1.0)
    ratevar.setValue(2.0)
    moves.append( mvScale(ratevar, weight=1.0) )
    alpha := 1.0/ratevar
    site_rates := fnDiscretizeGamma(alpha, alpha, 4)
}

#################################
# Define the phyloCTMC model    #
# (AKA the likelihood function) #
#################################

seq  ~ dnPhyloCTMC(tree=phylogeny, Q=Qmatrix, type="DNA", siteRates=site_rates)
seq.clamp(data) # attach the observed data

#########################
# Make the model object #
#########################

my_model = model(phylogeny)

if (do_mcmc) {
    #########################
    # Run the MCMC analysis #
    #########################
    name = "mcmc" 

    monitors.append( mnModel(filename="output/" + name + "/posterior_samples.log",printgen=10, separator = TAB) )
    monitors.append( mnFile(filename="output/" + name + "/tree_samples.trees",printgen=10, separator = TAB, phylogeny) )
    monitors.append( mnScreen(printgen=100, tree_length) )

    analysis = mcmc(my_model, monitors, moves)
    if (do_burnin) {
        analysis.burnin(generations=1000, tuningInterval=100) 
        analysis.operatorSummary()
    }
    analysis.run(generations=10000) 

    # create the map tree
    treetrace = readTreeTrace("output/" + name + "/tree_samples.trees", treetype="non-clock")
    map_tree = mapTree(treetrace,"output/" + name + "/MAP_tree.tree")
} else {
    ###################################
    # Run the stepping-stone analysis #
    ###################################
    name = "ss"
 
    monitors.append( mnScreen(printgen=100, tree_length) )

    ss_analysis = powerPosterior(my_model, monitors, moves, "output/" + name + "/ss", cats=50, alpha=0.3)
    ss_analysis.burnin(generations=1000,tuningInterval=50)
    ss_analysis.run(generations=1000)

    ss = steppingStoneSampler("output/" + name + "/ss", "power", "likelihood", TAB)
    ss.marginal()
}

# exit the program
q()
