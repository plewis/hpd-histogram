The k80lorad.py script recreates the illustrative example.

The variable do_jc determines whether JC or K80 model is used.
The variable do_steppingstone determines whether Generalized Steppingstone is used.
The variable do_plots determines whether the plots used in Figures 1 and 2 of the paper are generated.

Run the program as follows:

python3 k80lorad.py

The files mcmc-sample.txt, mcmc-info.txt, and (if do_steppingstone is True) ss-results.txt
will be generated. If these files are present when the program is run again, it will 
not perform simulation or MCMC or steppingstone, and instead simply reuse the data and
samples already generated. This is useful if you are playing around with LoRaD settings
such as trainingfrac or coverage, but be aware that you need to remove these files if
you wish to run everything from scratch.

Running the standalone loradML program

The k80lorad.py script will estimate the marginal likelihood using the LoRaD method itself,
but you can also use the standalone program loradML (https://github.com/plewis/loradML)
to do the calculations based on the mcmc-samples.txt file generated by k80lorad.py.

In order to run loradML, you will need to create the appropriate loradml.conf file in
the same directory as mcmc-samples.txt. Do this as follows:

If you ran k80lorad.py with do_jc = True
    cp loradml-jc.conf loradml.conf

If you ran k80lorad.py with do_jc = False
    cp loradml-k80.conf loradml.conf
    
Assuming the loradML executable is in your path, you can now run loradML as follows:

loradML

or, if you want to estimate the MCSE,

loradML --mcse



